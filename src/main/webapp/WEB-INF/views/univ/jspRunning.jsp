<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
jsp의 처리과정(1/2)<br>
클라이언트가 jsp페이지를 요청하면 웹 컨테이너가 다음을 수행함 <br> 
jsp 라이프 사이클 <br>
> jsp 페이지의 최초 요청을 처리할때 1.jsp 페이지(.jsp)를 서블릿 자바 프로그램(.java)으로 변환 <br>
2. 서블릿 자바 프로그램(.java)을 컴파일하여 서블릿 클래스 파일(.class)을 생성<br>
3. 서블릿(.class)을 실행하여 클라이언트 요청을 처리<br>
> 이후 요청의 처리시, jsp 페이지에 상응하는 서블릿이 존재하면 변화과 컴파일을 하지 않음<br>
1. jsp페이지가 수정되면 다시 변환/컴파일 작업을 해야함<br>
======================================================================<br>
jsp페이지의 번역(4/4)<br>
> 배포 후, 번역된 서블릿 소스 프로그램 찾기 <br>
[톰캣설치폴더]\\work\\catalina\\localhost\\[프로젝트이름]\\org\\apache\\jsp폴더에 자바 소스와 클래스 파일이 저장됨<br>
서블릿 소스 프로그램은 출력문을 사용하여 html 코드를 출력함<br>
======================================================================<br>
출력 버퍼와 응답(1/2)<br>
출력 버퍼의 사용 > 1. 출력 버퍼는 응답 결과의 임시 저장소 <br>
2. 응답을 만들 때 먼저 출력 버퍼에 기록함 > 1.page 지시어의 buffer 속성이 none이 아니어야 함<br>
3. 기록이 끝나면 버퍼의 내용을 클라이언트에게 전달<br>
4. 종료 전에 버퍼가 차면, 버퍼를 비우고 전달flush 함 > 1. page 지시어의 autoFlush 속성이 true이어야 가능<br>
2. 만약 autoFlush 속성이 false이면 예외 발생 <br>
(2/2)<br>
버퍼를 사용하는 이유 > 1. 데이터 전송 효율의 향상 <br>
2. 실행 도중에 버퍼를 비우고 새로운 내용을 넣을 수 있음 > 1.예를 들어 실행 도중에 에러가 발생할 경우 다른 내용으로 바꿈 <br>
3. 아직 전송 전이면, 버퍼에 있는 헤더의 내용도 변경할 수 있음 > 1.헤더 정보는 응답 몸체를 전송하기 전에 먼저 전송됨 <br>
========================================================================<br>

page 지시어에서  버퍼 설정하기(2/3)<br>
버퍼를 사용하지 않는 경우 제한 <br>
> 1. jsp:forward 기능을 사용할수 없음 > 1. 포워딩 전에 이미 응답 결과가 전송되었다면 오류가 생기기 때문<br>
2. 오류 페이지(errorPage) 속성을 사용하는 경우에도 버퍼링이 필요<br>
3. 출력된 결과를 변경할 수 없음 <br>
> 1. 즉시 전송되므로 도중에 오류가 생기면 이전 결과와 오류 정보가 섞임 <br>

======================================================================<br>
autoflush 속성 <br>
true인 경우 버퍼가 차면 버퍼를 비워 전송하고 작업을 계속함 <br>
false인경우 버퍼가 차면 예외가 발생함<br>
======================================================================<br>
서블릿<br>
JSP와 서블릿 <br>
1. JSP 기술은 서블릿 기술에 기초함 <br>
2. JSP 페이지는 자바 서블릿 프로그램으로 변환되어 처리됨 <br>
3. tomcat은 jsp와 서블릿 규약을 구현한 서블릿 컨테이너/ jsp 컨테이너<br>
=====================================================================<br>
이클립스로 서블릿 클래스 만들기 <br>
방법 > 1. 프로젝트 이름에서 오른 마우스 클릭후 new => servlet <br>
2. 클래스 이름을 입력함 <br>
3. 자동으로 만들어지는 서블릿 클래스는 생성자, doGet(), doPost() 가지고 있음 <br>
4. 실제 서블릿을 실행하면 생성자, init(), service(), doGet() 또는 doPost순으로 실행됨<br>
=====================================================================<br>
doGet 메서드<br>
서버가 서블릿을 통해 get 요청을 처리하기 위해 호출하는 메소드 get 방식은 단순 질의나 검색에 사용<br>
실제로는 서블릿 클래스에서 service() 메소드에 의해 호출됨 <br>
기능 > 1. 요청 데이터 읽기 2. 응답 헤더 작성 3. response.getwriter()를 이용하여 출력 스트림 만들기<br>
4. 출력 스트림을 이용하여 응답 데이터 작성<br>
=====================================================================<br>
서버가 서블릿을 통해 POST 요청을 처리하기 위해 호출하는 메소드 > 1.POST 방식은 클라이언트가 웹서버에 많은 양의 데이터를 보낼 때 사용<br>
form 태그의 method 속성을 post로 지정하여 요청하는 경우
기능 > 1. doGet()의 경우와 같음




 
</body>
</html>